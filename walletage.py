"""
WalletAge: –û—Ü–µ–Ω–∏ –≤–æ–∑—Ä–∞—Å—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Bitcoin-–∫–æ—à–µ–ª—å–∫–∞.
"""

import requests
from datetime import datetime
import argparse

def fetch_wallet_data(address):
    url = f"https://api.blockchair.com/bitcoin/dashboards/address/{address}"
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    return response.json()

def fetch_transaction_timestamp(txid):
    url = f"https://api.blockchair.com/bitcoin/raw/transaction/{txid}"
    response = requests.get(url)
    if response.status_code != 200:
        return None
    raw_data = response.json()
    try:
        block_time = raw_data["data"][txid]["decoded_raw_transaction"]["time"]
        return datetime.utcfromtimestamp(block_time)
    except Exception:
        return None

def analyze_wallet_age(address):
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –∫–æ—à–µ–ª—å–∫–∞: {address}")
    data = fetch_wallet_data(address)
    transactions = data["data"][address]["transactions"]

    if not transactions:
        print("‚ùó –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞.")
        return

    first_tx = transactions[-1]
    last_tx = transactions[0]

    first_time = fetch_transaction_timestamp(first_tx)
    last_time = fetch_transaction_timestamp(last_tx)

    if first_time and last_time:
        wallet_age_days = (datetime.utcnow() - first_time).days
        activity_span = (last_time - first_time).days or 1

        print(f"üìÜ –í–æ–∑—Ä–∞—Å—Ç –∫–æ—à–µ–ª—å–∫–∞: {wallet_age_days} –¥–Ω–µ–π")
        print(f"üìä –ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_span} –¥–Ω–µ–π")
        print(f"üîÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")

        tx_per_day = round(len(transactions) / activity_span, 2)
        print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –¥–µ–Ω—å: {tx_per_day}")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="WalletAge ‚Äî –≤–æ–∑—Ä–∞—Å—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Bitcoin-–∫–æ—à–µ–ª—å–∫–∞.")
    parser.add_argument("address", help="Bitcoin-–∞–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    args = parser.parse_args()
    analyze_wallet_age(args.address)
